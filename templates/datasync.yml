AWSTemplateFormatVersion: '2010-09-09'
Description: Minecraft DataSync Transfer

Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application to deploy
  EnvironmentName:
    Type: String
    Description: The name of the environment to deploy
  VpcName:
    Type: String
    Description: The name of the VPC to use
  FileSystemArn:
    Type: String
    Description: The ARN of the EFS FileSystem
  FileSystemAccessPointArn:
    Type: String
    Description: The ARN of the EFS FileSystem access point
  ServiceSecurityGroupId:
    Type: String
    Description: The ID of the service's security group

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3045
    Properties:
      BucketName: !Sub ${ApplicationName}-${EnvironmentName}-storage
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled

  DataSyncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApplicationName}-${EnvironmentName}-datasync
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: datasync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess
      Policies:
        - PolicyName: datasync-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:HeadBucket
                Effect: Allow
                Resource: !Sub ${Bucket.Arn}
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub ${Bucket.Arn}/*

  S3Location:
    Type: AWS::DataSync::LocationS3
    Properties:
      S3BucketArn: !GetAtt Bucket.Arn
      S3Config:
        BucketAccessRoleArn: !GetAtt DataSyncRole.Arn
      S3StorageClass: STANDARD
      Subdirectory: /backup

  EfsLocation:
    Type: AWS::DataSync::LocationEFS
    Properties:
      AccessPointArn: !Ref FileSystemAccessPointArn
      Subdirectory: /
      Ec2Config:
        SubnetArn: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:subnet/{{resolve:ssm:/vpc/${VpcName}/subnet-a-public-id}}
        SecurityGroupArns:
          - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${ServiceSecurityGroupId}
      EfsFilesystemArn: !Ref FileSystemArn
      FileSystemAccessRoleArn: !GetAtt DataSyncRole.Arn
      InTransitEncryption: TLS1_2

  DataSyncLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${ApplicationName}/${EnvironmentName}/datasync

  DataSyncLogsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub ${ApplicationName}-${EnvironmentName}-datasync-logs
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "DataSyncLogsToCloudWatchLogs",
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream"
            ],
            "Principal": {
              "Service": "datasync.amazonaws.com"
            },
            "Condition": {
              "StringEquals": {
                "aws:SourceAccount": "${AWS::AccountId}"
              }
            },
            "Resource": "${DataSyncLogs.Arn}"
          }]
        }

  DataSyncBackupTask:
    Type: AWS::DataSync::Task
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-backup
      CloudWatchLogGroupArn: !GetAtt DataSyncLogs.Arn
      DestinationLocationArn: !Ref S3Location
      SourceLocationArn: !Ref EfsLocation
      Options:
        PreserveDeletedFiles: REMOVE
        LogLevel: TRANSFER

  DataSyncRestoreTask:
    Type: AWS::DataSync::Task
    Properties:
      Name: !Sub ${ApplicationName}-${EnvironmentName}-restore
      CloudWatchLogGroupArn: !GetAtt DataSyncLogs.Arn
      DestinationLocationArn: !Ref EfsLocation
      SourceLocationArn: !Ref S3Location
      Options:
        PreserveDeletedFiles: REMOVE
        LogLevel: TRANSFER

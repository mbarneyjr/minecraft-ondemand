AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Minecraft Ondemand Trigger


Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application to deploy
  EnvironmentName:
    Type: String
    Description: The name of the environment to deploy
  VpcName:
    Type: String
    Description: The name of the VPC
  DomainName:
    Type: String
    Description: The domain name to use
  DnsLogGroupName:
    Type: String
    Description: The name of the log group to use
  EcsCluster:
    Type: String
    Description: The ID of the cluster
  EcsService:
    Type: String
    Description: The ID of the service
  MapTaskDefinition:
    Type: String
    Description: The ARN of the map renderer task definition
  ServiceSecurityGroupId:
    Type: String
    Description: The ID of the service's security group
  TaskRoleArn:
    Type: String
    Description: The ARN of the service task role
  ExecutionRoleArn:
    Type: String
    Description: The ARN of the service execution role


Resources:
  Trigger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-api-request-queue-processor
      CodeUri: ../artifacts/dist.zip
      Handler: trigger.triggerHandler
      Runtime: nodejs16.x
      Timeout: 60
      Environment:
        Variables:
          ECS_CLUSTER: !Ref EcsCluster
          ECS_SERVICE: !Ref EcsService
      Events:
        LogSubscription:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: !Ref DnsLogGroupName
            FilterPattern: !Sub '"_minecraft._tcp.${DomainName}"'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/${EcsCluster}/${EcsService}
  TriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Trigger}

  MapTrigger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-trigger-map-render
      CodeUri: ../artifacts/dist.zip
      Handler: render.renderHandler
      Runtime: nodejs16.x
      Timeout: 60
      Environment:
        Variables:
          ECS_CLUSTER: !Ref EcsCluster
          TASK_DEFINITION: !Ref MapTaskDefinition
          SUBNETS: !Join
            - ','
            - - !Sub '{{resolve:ssm:/vpc/${VpcName}/subnet-a-public-id}}'
              - !Sub '{{resolve:ssm:/vpc/${VpcName}/subnet-b-public-id}}'
              - !Sub '{{resolve:ssm:/vpc/${VpcName}/subnet-c-public-id}}'
          SECURITY_GROUPS: !Join
            - ','
            - - !Ref ServiceSecurityGroupId
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: ecs:RunTask
              Resource: !Ref MapTaskDefinition
            - Effect: Allow
              Action: ecs:ListTasks
              Resource: '*'
            - Effect: Allow
              Action: iam:PassRole
              Resource:
                - !Ref TaskRoleArn
                - !Ref ExecutionRoleArn
  MapTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${MapTrigger}


Outputs:
  FunctionName:
    Value: !Ref Trigger
    Description: The name of the log trigger function
  LogGroupName:
    Value: !Ref TriggerLogGroup
    Description: The name of the log group
